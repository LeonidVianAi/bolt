# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
#if __package__ or "." in __name__:
#    from . import _bolt
#else:
#    import _bolt
import _bolt

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bolt.delete_SwigPyIterator

    def value(self):
        return _bolt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _bolt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _bolt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _bolt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _bolt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _bolt.SwigPyIterator_copy(self)

    def next(self):
        return _bolt.SwigPyIterator_next(self)

    def __next__(self):
        return _bolt.SwigPyIterator___next__(self)

    def previous(self):
        return _bolt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _bolt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _bolt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _bolt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _bolt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _bolt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _bolt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _bolt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _bolt:
_bolt.SwigPyIterator_swigregister(SwigPyIterator)

class BoltEncoder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbytes, scaleby=1.0):
        _bolt.BoltEncoder_swiginit(self, _bolt.new_BoltEncoder(nbytes, scaleby))
    __swig_destroy__ = _bolt.delete_BoltEncoder

    def set_centroids(self, *args):
        return _bolt.BoltEncoder_set_centroids(self, *args)

    def set_data(self, *args):
        return _bolt.BoltEncoder_set_data(self, *args)

    def set_offsets(self, v):
        return _bolt.BoltEncoder_set_offsets(self, v)

    def set_scale(self, a):
        return _bolt.BoltEncoder_set_scale(self, a)

    def dists_sq(self, q):
        return _bolt.BoltEncoder_dists_sq(self, q)

    def dot_prods(self, q):
        return _bolt.BoltEncoder_dot_prods(self, q)

    def knn_l2(self, q, k):
        return _bolt.BoltEncoder_knn_l2(self, q, k)

    def knn_mips(self, q, k):
        return _bolt.BoltEncoder_knn_mips(self, q, k)

    def set_codes(self, *args):
        return _bolt.BoltEncoder_set_codes(self, *args)

    def centroids(self):
        return _bolt.BoltEncoder_centroids(self)

    def codes(self):
        return _bolt.BoltEncoder_codes(self)

    def lut_l2(self, *args):
        return _bolt.BoltEncoder_lut_l2(self, *args)

    def lut_dot(self, *args):
        return _bolt.BoltEncoder_lut_dot(self, *args)

    def get_lut(self):
        return _bolt.BoltEncoder_get_lut(self)

    def get_offsets(self):
        return _bolt.BoltEncoder_get_offsets(self)

    def get_scale(self):
        return _bolt.BoltEncoder_get_scale(self)

# Register BoltEncoder in _bolt:
_bolt.BoltEncoder_swigregister(BoltEncoder)



